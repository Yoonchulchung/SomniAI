// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: SomniAI.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PushGo_StreamToGo_FullMethodName = "/somniai.v1.PushGo/StreamToGo"
)

// PushGoClient is the client API for PushGo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushGoClient interface {
	// Mobile -> Go Server
	StreamToGo(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendImage, Ack], error)
}

type pushGoClient struct {
	cc grpc.ClientConnInterface
}

func NewPushGoClient(cc grpc.ClientConnInterface) PushGoClient {
	return &pushGoClient{cc}
}

func (c *pushGoClient) StreamToGo(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendImage, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PushGo_ServiceDesc.Streams[0], PushGo_StreamToGo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendImage, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushGo_StreamToGoClient = grpc.ClientStreamingClient[SendImage, Ack]

// PushGoServer is the server API for PushGo service.
// All implementations must embed UnimplementedPushGoServer
// for forward compatibility.
type PushGoServer interface {
	// Mobile -> Go Server
	StreamToGo(grpc.ClientStreamingServer[SendImage, Ack]) error
	mustEmbedUnimplementedPushGoServer()
}

// UnimplementedPushGoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPushGoServer struct{}

func (UnimplementedPushGoServer) StreamToGo(grpc.ClientStreamingServer[SendImage, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method StreamToGo not implemented")
}
func (UnimplementedPushGoServer) mustEmbedUnimplementedPushGoServer() {}
func (UnimplementedPushGoServer) testEmbeddedByValue()                {}

// UnsafePushGoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushGoServer will
// result in compilation errors.
type UnsafePushGoServer interface {
	mustEmbedUnimplementedPushGoServer()
}

func RegisterPushGoServer(s grpc.ServiceRegistrar, srv PushGoServer) {
	// If the following call pancis, it indicates UnimplementedPushGoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PushGo_ServiceDesc, srv)
}

func _PushGo_StreamToGo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushGoServer).StreamToGo(&grpc.GenericServerStream[SendImage, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushGo_StreamToGoServer = grpc.ClientStreamingServer[SendImage, Ack]

// PushGo_ServiceDesc is the grpc.ServiceDesc for PushGo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushGo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "somniai.v1.PushGo",
	HandlerType: (*PushGoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamToGo",
			Handler:       _PushGo_StreamToGo_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "SomniAI.proto",
}

const (
	PushPy_StreamToPy_FullMethodName = "/somniai.v1.PushPy/StreamToPy"
)

// PushPyClient is the client API for PushPy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushPyClient interface {
	// Go Server -> FastAPI
	StreamToPy(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendImage, Ack], error)
}

type pushPyClient struct {
	cc grpc.ClientConnInterface
}

func NewPushPyClient(cc grpc.ClientConnInterface) PushPyClient {
	return &pushPyClient{cc}
}

func (c *pushPyClient) StreamToPy(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendImage, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PushPy_ServiceDesc.Streams[0], PushPy_StreamToPy_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendImage, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushPy_StreamToPyClient = grpc.ClientStreamingClient[SendImage, Ack]

// PushPyServer is the server API for PushPy service.
// All implementations must embed UnimplementedPushPyServer
// for forward compatibility.
type PushPyServer interface {
	// Go Server -> FastAPI
	StreamToPy(grpc.ClientStreamingServer[SendImage, Ack]) error
	mustEmbedUnimplementedPushPyServer()
}

// UnimplementedPushPyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPushPyServer struct{}

func (UnimplementedPushPyServer) StreamToPy(grpc.ClientStreamingServer[SendImage, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method StreamToPy not implemented")
}
func (UnimplementedPushPyServer) mustEmbedUnimplementedPushPyServer() {}
func (UnimplementedPushPyServer) testEmbeddedByValue()                {}

// UnsafePushPyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushPyServer will
// result in compilation errors.
type UnsafePushPyServer interface {
	mustEmbedUnimplementedPushPyServer()
}

func RegisterPushPyServer(s grpc.ServiceRegistrar, srv PushPyServer) {
	// If the following call pancis, it indicates UnimplementedPushPyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PushPy_ServiceDesc, srv)
}

func _PushPy_StreamToPy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushPyServer).StreamToPy(&grpc.GenericServerStream[SendImage, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushPy_StreamToPyServer = grpc.ClientStreamingServer[SendImage, Ack]

// PushPy_ServiceDesc is the grpc.ServiceDesc for PushPy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushPy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "somniai.v1.PushPy",
	HandlerType: (*PushPyServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamToPy",
			Handler:       _PushPy_StreamToPy_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "SomniAI.proto",
}
